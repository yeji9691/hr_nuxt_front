/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

/// <reference types="unplugin-vue-router/client" />

import type {
  // type safe route locations
  RouteLocationTypedList,
  RouteLocationResolvedTypedList,
  RouteLocationNormalizedTypedList,
  RouteLocationNormalizedLoadedTypedList,
  RouteLocationAsString,
  RouteLocationAsRelativeTypedList,
  RouteLocationAsPathTypedList,

  // helper types
  // route definitions
  RouteRecordInfo,
  ParamValue,
  ParamValueOneOrMore,
  ParamValueZeroOrMore,
  ParamValueZeroOrOne,

  // vue-router extensions
  _RouterTyped,
  RouterLinkTyped,
  RouterLinkPropsTyped,
  NavigationGuard,
  UseLinkFnTyped,

  // data fetching
  _DataLoader,
  _DefineLoaderOptions,
} from 'unplugin-vue-router/types'

declare module 'vue-router/auto/routes' {
  export interface RouteNamedMap {
    'index': RouteRecordInfo<'index', '/', Record<never, never>, Record<never, never>>,
    'hr-affair-empDetail': RouteRecordInfo<'hr-affair-empDetail', '/hr/affair/empDetail', Record<never, never>, Record<never, never>>,
    'hr-affair-empList': RouteRecordInfo<'hr-affair-empList', '/hr/affair/empList', Record<never, never>, Record<never, never>>,
    'hr-affair-registerEmpList': RouteRecordInfo<'hr-affair-registerEmpList', '/hr/affair/registerEmpList', Record<never, never>, Record<never, never>>,
    'hr-appo-log': RouteRecordInfo<'hr-appo-log', '/hr/appo/log', Record<never, never>, Record<never, never>>,
    'hr-appo-manage': RouteRecordInfo<'hr-appo-manage', '/hr/appo/manage', Record<never, never>, Record<never, never>>,
    'hr-appo-request': RouteRecordInfo<'hr-appo-request', '/hr/appo/request', Record<never, never>, Record<never, never>>,
    'hr-attendreg-daily': RouteRecordInfo<'hr-attendreg-daily', '/hr/attendreg/daily', Record<never, never>, Record<never, never>>,
    'hr-attendreg-leave': RouteRecordInfo<'hr-attendreg-leave', '/hr/attendreg/leave', Record<never, never>, Record<never, never>>,
    'hr-attendreg-overWork': RouteRecordInfo<'hr-attendreg-overWork', '/hr/attendreg/overWork', Record<never, never>, Record<never, never>>,
    'hr-attendreg-rest': RouteRecordInfo<'hr-attendreg-rest', '/hr/attendreg/rest', Record<never, never>, Record<never, never>>,
    'hr-attendreg-travelAndEducationRequest': RouteRecordInfo<'hr-attendreg-travelAndEducationRequest', '/hr/attendreg/travelAndEducationRequest', Record<never, never>, Record<never, never>>,
    'hr-attndmgmt-annual': RouteRecordInfo<'hr-attndmgmt-annual', '/hr/attndmgmt/annual', Record<never, never>, Record<never, never>>,
    'hr-attndmgmt-break': RouteRecordInfo<'hr-attndmgmt-break', '/hr/attndmgmt/break', Record<never, never>, Record<never, never>>,
    'hr-attndmgmt-daily': RouteRecordInfo<'hr-attndmgmt-daily', '/hr/attndmgmt/daily', Record<never, never>, Record<never, never>>,
    'hr-attndmgmt-month': RouteRecordInfo<'hr-attndmgmt-month', '/hr/attndmgmt/month', Record<never, never>, Record<never, never>>,
    'hr-attndmgmt-rest': RouteRecordInfo<'hr-attndmgmt-rest', '/hr/attndmgmt/rest', Record<never, never>, Record<never, never>>,
    'hr-base-authManage': RouteRecordInfo<'hr-base-authManage', '/hr/base/authManage', Record<never, never>, Record<never, never>>,
    'hr-base-baseWorkTimeManage': RouteRecordInfo<'hr-base-baseWorkTimeManage', '/hr/base/baseWorkTimeManage', Record<never, never>, Record<never, never>>,
    'hr-base-codeManage': RouteRecordInfo<'hr-base-codeManage', '/hr/base/codeManage', Record<never, never>, Record<never, never>>,
    'hr-base-deptManage': RouteRecordInfo<'hr-base-deptManage', '/hr/base/deptManage', Record<never, never>, Record<never, never>>,
    'hr-base-holidayManage': RouteRecordInfo<'hr-base-holidayManage', '/hr/base/holidayManage', Record<never, never>, Record<never, never>>,
    'hr-base-positionManage': RouteRecordInfo<'hr-base-positionManage', '/hr/base/positionManage', Record<never, never>, Record<never, never>>,
    'hr-base-project': RouteRecordInfo<'hr-base-project', '/hr/base/project', Record<never, never>, Record<never, never>>,
    'hr-certificate-approval': RouteRecordInfo<'hr-certificate-approval', '/hr/certificate/approval', Record<never, never>, Record<never, never>>,
    'hr-certificate-issue': RouteRecordInfo<'hr-certificate-issue', '/hr/certificate/issue', Record<never, never>, Record<never, never>>,
    'hr-conexpense-presentCondition': RouteRecordInfo<'hr-conexpense-presentCondition', '/hr/conexpense/presentCondition', Record<never, never>, Record<never, never>>,
    'hr-conexpense-request': RouteRecordInfo<'hr-conexpense-request', '/hr/conexpense/request', Record<never, never>, Record<never, never>>,
    'hr-dailyattend-awrds': RouteRecordInfo<'hr-dailyattend-awrds', '/hr/dailyattend/awrds', Record<never, never>, Record<never, never>>,
    'hr-dailyattend-register': RouteRecordInfo<'hr-dailyattend-register', '/hr/dailyattend/register', Record<never, never>, Record<never, never>>,
    'hr-dailyemp-log': RouteRecordInfo<'hr-dailyemp-log', '/hr/dailyemp/log', Record<never, never>, Record<never, never>>,
    'hr-dailyemp-manage': RouteRecordInfo<'hr-dailyemp-manage', '/hr/dailyemp/manage', Record<never, never>, Record<never, never>>,
    'hr-dailysal-awrds': RouteRecordInfo<'hr-dailysal-awrds', '/hr/dailysal/awrds', Record<never, never>, Record<never, never>>,
    'hr-dailysal-register': RouteRecordInfo<'hr-dailysal-register', '/hr/dailysal/register', Record<never, never>, Record<never, never>>,
    'hr-dailysal-salary': RouteRecordInfo<'hr-dailysal-salary', '/hr/dailysal/salary', Record<never, never>, Record<never, never>>,
    'hr-empeval-list': RouteRecordInfo<'hr-empeval-list', '/hr/empeval/list', Record<never, never>, Record<never, never>>,
    'hr-empeval-manage': RouteRecordInfo<'hr-empeval-manage', '/hr/empeval/manage', Record<never, never>, Record<never, never>>,
    'hr-salbase-extManage': RouteRecordInfo<'hr-salbase-extManage', '/hr/salbase/extManage', Record<never, never>, Record<never, never>>,
    'hr-salbase-manage': RouteRecordInfo<'hr-salbase-manage', '/hr/salbase/manage', Record<never, never>, Record<never, never>>,
    'hr-salbase-socialInsure': RouteRecordInfo<'hr-salbase-socialInsure', '/hr/salbase/socialInsure', Record<never, never>, Record<never, never>>,
    'hr-salcheck-awrds': RouteRecordInfo<'hr-salcheck-awrds', '/hr/salcheck/awrds', Record<never, never>, Record<never, never>>,
    'hr-salcheck-month': RouteRecordInfo<'hr-salcheck-month', '/hr/salcheck/month', Record<never, never>, Record<never, never>>,
    'hr-salcheck-severancePay': RouteRecordInfo<'hr-salcheck-severancePay', '/hr/salcheck/severancePay', Record<never, never>, Record<never, never>>,
    'hr-salreg-award': RouteRecordInfo<'hr-salreg-award', '/hr/salreg/award', Record<never, never>, Record<never, never>>,
    'hr-salreg-month': RouteRecordInfo<'hr-salreg-month', '/hr/salreg/month', Record<never, never>, Record<never, never>>,
    'hr-salreg-severancePay': RouteRecordInfo<'hr-salreg-severancePay', '/hr/salreg/severancePay', Record<never, never>, Record<never, never>>,
    'login': RouteRecordInfo<'login', '/login', Record<never, never>, Record<never, never>>,
    'second-page': RouteRecordInfo<'second-page', '/second-page', Record<never, never>, Record<never, never>>,
  }
}

declare module 'vue-router/auto' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export type RouterTyped = _RouterTyped<RouteNamedMap>

  /**
   * Type safe version of `RouteLocationNormalized` (the type of `to` and `from` in navigation guards).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalized<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationNormalizedLoaded` (the return type of `useRoute()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalizedLoaded<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationResolved` (the returned route of `router.resolve()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationResolved<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationResolvedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocation` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocation<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationRaw` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationRaw<Name extends keyof RouteNamedMap = keyof RouteNamedMap> =
    | RouteLocationAsString<RouteNamedMap>
    | RouteLocationAsRelativeTypedList<RouteNamedMap>[Name]
    | RouteLocationAsPathTypedList<RouteNamedMap>[Name]

  /**
   * Generate a type safe params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParams<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['params']
  /**
   * Generate a type safe raw params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParamsRaw<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['paramsRaw']

  export function useRouter(): RouterTyped
  export function useRoute<Name extends keyof RouteNamedMap = keyof RouteNamedMap>(name?: Name): RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  export const useLink: UseLinkFnTyped<RouteNamedMap>

  export function onBeforeRouteLeave(guard: NavigationGuard<RouteNamedMap>): void
  export function onBeforeRouteUpdate(guard: NavigationGuard<RouteNamedMap>): void

  export const RouterLink: RouterLinkTyped<RouteNamedMap>
  export const RouterLinkProps: RouterLinkPropsTyped<RouteNamedMap>

  // Experimental Data Fetching

  export function defineLoader<
    P extends Promise<any>,
    Name extends keyof RouteNamedMap = keyof RouteNamedMap,
    isLazy extends boolean = false,
  >(
    name: Name,
    loader: (route: RouteLocationNormalizedLoaded<Name>) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>
  export function defineLoader<
    P extends Promise<any>,
    isLazy extends boolean = false,
  >(
    loader: (route: RouteLocationNormalizedLoaded) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>

  export {
    _definePage as definePage,
    _HasDataLoaderMeta as HasDataLoaderMeta,
    _setupDataFetchingGuard as setupDataFetchingGuard,
    _stopDataFetchingScope as stopDataFetchingScope,
  } from 'unplugin-vue-router/runtime'
}

declare module 'vue-router' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export interface TypesConfig {
    beforeRouteUpdate: NavigationGuard<RouteNamedMap>
    beforeRouteLeave: NavigationGuard<RouteNamedMap>

    $route: RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[keyof RouteNamedMap]
    $router: _RouterTyped<RouteNamedMap>

    RouterLink: RouterLinkTyped<RouteNamedMap>
  }
}
